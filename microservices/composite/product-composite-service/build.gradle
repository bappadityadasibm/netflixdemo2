buildscript {
    ext {
        springBootVersion = '1.2.2.RELEASE'
    }
    repositories {
        //mavenCentral()
        maven { url 'http://localhost:8081/artifactory/repo' }
    
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.3.0'
        classpath 'nu.studer:gradle-plugindev-plugin:1.0.4'
        classpath 'org.codehaus.groovy:groovy-backports-compat23:2.4.6'
        classpath 'net.researchgate:gradle-release:2.3.5'
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.4.0"
    id 'net.researchgate.release' version '2.4.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

//apply plugin: 'maven-publish'

//publishing{
//  publications {
//    maven(MavenPublication)  {
//        groupId 'dbpackage'
//        version = '1.0'
//        artifactId project.getName()
//        artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
//    }
//  }
//}


jar {
    baseName = 'product-composite-service'
    version = '0.0.1-SNAPSHOT'
}


/*************publishing****************


/*************publishing****************

/****************/
artifactory {
  contextUrl = 'http://localhost:8081/artifactory'   //The base Artifactory URL if not overridden by the publisher/resolver
  publish {
    contextUrl = 'http://localhost:8081/artifactory'   //The base Artifactory URL for the publisher
    //A closure defining publishing information
    repository {
      repoKey = "integration-libs-local"   //The Artifactory repository key to publish to
      username = "admin"          //The publisher user name
      password = "password"       //The publisher password
      ivy {
        //Optional section for configuring Ivy publication. Assumes Maven repo layout if not specified
        ivyLayout = '[organization]/[module]/[revision]/[type]s/ivy-[revision].xml'
        artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
        mavenCompatible = true //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
      }
    }
    defaults {
        //List of Gradle Publications (names or objects) from which to collect the list of artifacts to be deployed to Artifactory.
        //publications ('mavenJava')
        ////List of Gradle Configurations (names or objects) from which to collect the list of artifacts to be deployed to Artifactory. 
        publishConfigs('archives', 'published')                   
        properties = ['qa.level': 'basic', 'q.os': 'win32, deb, osx']  //Optional map of properties to attach to all published artifacts
        /*
        The properties closure in the "defaults" task uses the following syntax:
        properties {
            publicationName 'group:module:version:classifier@type', key1:'value1', key2:'value2', ...
        }
        publicationName: A valid name for a publication of the project. You can use all to apply the properties to all publications.
        group:module:version:classifier@type: A filter that specifies the artifacts to which properties should be attached. 
        The filter may contain wildcards: * for all characters or ? for a single character.
        key:'value': A list of key/value properties that will be attached to to the published artifacts matching the filter. 
        
        properties {                                                   //Optional closure to attach properties to artifacts based on a list of artifact patterns per project publication
            foo '*:*:*:*@*', platform: 'linux', 'win64'                //The property platform=linux,win64 will be set on all artifacts in foo publication
            mavenJava 'org.jfrog:*:*:*@*', key1: 'val1'                //The property key1=val1 will be set on all artifacts part of the mavenJava publication and with group org.jfrog
            all 'org.jfrog:shared:1.?:*@*', key2: 'val2', key3: 'val3' //The properties key2 and key3 will be set on all published artifacts (all publications) with group:artifact:version 
                                                                       //equal to org.jfrog:shared:1.?
        }
	*/
        publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
        publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
        publishPom = true   //Publish generated POM files to Artifactory (true by default).
        publishIvy = true   //Publish generated Ivy descriptor files to Artifactory (true by default).
    }
  }
/*
  resolve {
    contextUrl = 'http://repo.myorg.com/artifactory'   //The base Artifactory URL for the resolver
    repository {
      +repoKey = 'libs-releases'  //The Artifactory (preferably virtual) repository key to resolve from
      username = 'resolver'       //Optional resolver user name (leave out to use anonymous resolution)
      password = 'resolverPaS*'   //The resolver password
      maven = true                //Resolve Maven-style artifacts and descriptors (true by default)
      ivy {
        //Optional section for configuring Ivy-style resolution. Assumes Maven repo layout if If not specified
        ivyLayout = ...
        artifactLayout = ...
        mavenCompatible = ...
      }
    }
  }
*/
  // Redefine basic properties of the build info object
  clientConfig.setIncludeEnvVars(true)
  clientConfig.info.addEnvironmentProperty('test.adding.dynVar',new java.util.Date().toString())
  clientConfig.info.setBuildName('dbmicroservicebuild')
  clientConfig.info.setBuildNumber('' + new java.util.Random(System.currentTimeMillis()).nextInt(20000))
  clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}


/****************/

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    failOnUnversionedFiles = false
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = ''
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    buildTasks = ['build']
    /*versionPatterns = [
            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
    ]*/
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        // Can't find spring-cloud-build in maven central...
        url 'http://maven.springframework.org/release'
    }
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile("org.springframework.boot:spring-boot-starter-undertow")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.cloud:spring-cloud-starter-hystrix:1.0.0.RELEASE")
    compile("org.springframework.cloud:spring-cloud-starter-eureka:1.0.0.RELEASE")
    compile("org.springframework.cloud:spring-cloud-starter-bus-amqp:1.0.0.RELEASE")
    compile("org.springframework.cloud:spring-cloud-netflix-hystrix-amqp:1.0.0.RELEASE")

    compile("se.callista.microservises.core.product:product-service:0.0.1-SNAPSHOT")
    compile("se.callista.microservises.core.recommendation:recommendation-service:0.0.1-SNAPSHOT")
    compile("se.callista.microservises.core.review:review-service:0.0.1-SNAPSHOT")

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
